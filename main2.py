
import sys
sys.path.append('')
import base64
import json
from urllib.parse import unquote


def handle_proxy_base64url():
    base64_str = 'dm1lc3M6Ly9leUp5WlcxaGNtc2lPaUxsaWFua3Zabm10WUhwaDQvdnZKb3hMalE0UjBJaUxDSjBlWEJsSWpwdWRXeHNMQ0poWkdRaU9pSjNkM2N1YTJGcllYbDFiaTVzYjJ3aUxDSndiM0owSWpveE1EQTROaXdpYVdRaU9pSXdPVFF5T0dFNFpTMHdNemM1TFRNME1HTXRZVEEyWXkxbU5XRXpNemcyTlRNME1UQWlMQ0p1WlhRaU9pSjBZM0FpTENKaGFXUWlPakFzSW5Ceklqb2k1WW1wNUwyWjVyV0I2WWVQNzd5YU1TNDBPRWRDSW4wPQp2bWVzczovL2V5SnlaVzFoY21zaU9pTG92NGZtbkovbWw3YnBsN1R2dkpveU1ESTBMVEE1TFRJd0lpd2lkSGx3WlNJNmJuVnNiQ3dpWVdSa0lqb2lkM2QzTG10aGEyRjVkVzR1Ykc5c0lpd2ljRzl5ZENJNk1UQXdPRFlzSW1sa0lqb2lNRGswTWpoaE9HVXRNRE0zT1Mwek5EQmpMV0V3Tm1NdFpqVmhNek00TmpVek5ERXdJaXdpYm1WMElqb2lkR053SWl3aVlXbGtJam93TENKd2N5STZJdWkvaCthY24rYVh0dW1YdE8rOG1qSXdNalF0TURrdE1qQWlmUT09CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJekxtdGhhMkY1ZFc0dWFHOXRaWE1pTENKd2IzSjBJam96TURBd015d2lZV2xrSWpveUxDSnVaWFFpT2lKMFkzQWlMQ0pvWldGa1pYSlVlWEJsSWpvaWJtOXVaU0lzSW5ZaU9pSXlJaXdpZEhsd1pTSTZJbTV2Ym1VaUxDSndjeUk2SWx0MmFYQXhYU0Rpa2FBZzU3Nk81WnU5SURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbkpsYldGeWF5STZJbHQyYVhBeFhTRGlrYUFnNTc2TzVadTlJREV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0ltbGtJam9pTURrME1qaGhPR1V0TURNM09TMHpOREJqTFdFd05tTXRaalZoTXpNNE5qVXpOREV3SWl3aVkyeGhjM01pT2pGOQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSTBMbXRoYTJGNWRXNHVhRzl0WlhNaUxDSndiM0owSWpvek1EQXdOQ3dpWVdsa0lqb3lMQ0p1WlhRaU9pSjBZM0FpTENKb1pXRmtaWEpVZVhCbElqb2libTl1WlNJc0luWWlPaUl5SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0p3Y3lJNklsdDJhWEF4WFNEaWthRWc1cGVsNXB5c0lERXdNREJONzcyY3c1Y3g1WUNONTQ2SDc3MmM2Wm1RNllDZk1UQXdUU0lzSW5KbGJXRnlheUk2SWx0MmFYQXhYU0Rpa2FFZzVwZWw1cHlzSURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbWxrSWpvaU1EazBNamhoT0dVdE1ETTNPUzB6TkRCakxXRXdObU10WmpWaE16TTROalV6TkRFd0lpd2lZMnhoYzNNaU9qRjkKdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUkxTG10aGEyRjVkVzR1YUc5dFpYTWlMQ0p3YjNKMElqb3pNREF3TlN3aVlXbGtJam95TENKdVpYUWlPaUowWTNBaUxDSm9aV0ZrWlhKVWVYQmxJam9pYm05dVpTSXNJbllpT2lJeUlpd2lkSGx3WlNJNkltNXZibVVpTENKd2N5STZJbHQyYVhBeFhTRGlrYUlnNXBlbDVweXNJREV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0luSmxiV0Z5YXlJNklsdDJhWEF4WFNEaWthSWc1cGVsNXB5c0lERXdNREJONzcyY3c1Y3g1WUNONTQ2SDc3MmM2Wm1RNllDZk1UQXdUU0lzSW1sa0lqb2lNRGswTWpoaE9HVXRNRE0zT1Mwek5EQmpMV0V3Tm1NdFpqVmhNek00TmpVek5ERXdJaXdpWTJ4aGMzTWlPakY5CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJMkxtdGhhMkY1ZFc0dWFHOXRaWE1pTENKd2IzSjBJam96TURBd05pd2lZV2xrSWpveUxDSnVaWFFpT2lKMFkzQWlMQ0pvWldGa1pYSlVlWEJsSWpvaWJtOXVaU0lzSW5ZaU9pSXlJaXdpZEhsd1pTSTZJbTV2Ym1VaUxDSndjeUk2SWx0MmFYQXhYU0Rpa2FNZzVwZWw1cHlzSURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbkpsYldGeWF5STZJbHQyYVhBeFhTRGlrYU1nNXBlbDVweXNJREV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0ltbGtJam9pTURrME1qaGhPR1V0TURNM09TMHpOREJqTFdFd05tTXRaalZoTXpNNE5qVXpOREV3SWl3aVkyeGhjM01pT2pGOQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSTNMbXRoYTJGNWRXNHVhRzl0WlhNaUxDSndiM0owSWpvek1EQXdOeXdpWVdsa0lqb3lMQ0p1WlhRaU9pSjBZM0FpTENKb1pXRmtaWEpVZVhCbElqb2libTl1WlNJc0luWWlPaUl5SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0p3Y3lJNklsdDJhWEF4WFNEaWthUWc1cGVsNXB5c0lERXdNREJONzcyY3c1Y3g1WUNONTQ2SDc3MmM2Wm1RNllDZk1UQXdUU0lzSW5KbGJXRnlheUk2SWx0MmFYQXhYU0Rpa2FRZzVwZWw1cHlzSURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbWxrSWpvaU1EazBNamhoT0dVdE1ETTNPUzB6TkRCakxXRXdObU10WmpWaE16TTROalV6TkRFd0lpd2lZMnhoYzNNaU9qRjkKdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUk0TG10aGEyRjVkVzR1YUc5dFpYTWlMQ0p3YjNKMElqb3pNREF3T0N3aVlXbGtJam95TENKdVpYUWlPaUowWTNBaUxDSm9aV0ZrWlhKVWVYQmxJam9pYm05dVpTSXNJbllpT2lJeUlpd2lkSGx3WlNJNkltNXZibVVpTENKd2N5STZJbHQyYVhBeFhTRGlrYVVnNXBlbDVweXNJREV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0luSmxiV0Z5YXlJNklsdDJhWEF4WFNEaWthVWc1cGVsNXB5c0lERXdNREJONzcyY3c1Y3g1WUNONTQ2SDc3MmM2Wm1RNllDZk1UQXdUU0lzSW1sa0lqb2lNRGswTWpoaE9HVXRNRE0zT1Mwek5EQmpMV0V3Tm1NdFpqVmhNek00TmpVek5ERXdJaXdpWTJ4aGMzTWlPakY5CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJNUxtdGhhMkY1ZFc0dWFHOXRaWE1pTENKd2IzSjBJam96TURBd09Td2lZV2xrSWpveUxDSnVaWFFpT2lKMFkzQWlMQ0pvWldGa1pYSlVlWEJsSWpvaWJtOXVaU0lzSW5ZaU9pSXlJaXdpZEhsd1pTSTZJbTV2Ym1VaUxDSndjeUk2SWx0MmFYQXhYU0Rpa2FZZzVwZWw1cHlzSURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbkpsYldGeWF5STZJbHQyYVhBeFhTRGlrYVlnNXBlbDVweXNJREV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0ltbGtJam9pTURrME1qaGhPR1V0TURNM09TMHpOREJqTFdFd05tTXRaalZoTXpNNE5qVXpOREV3SWl3aVkyeGhjM01pT2pGOQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSXhNQzVyWVd0aGVYVnVMbWh2YldWeklpd2ljRzl5ZENJNk16QXdNVEFzSW1GcFpDSTZNaXdpYm1WMElqb2lkR053SWl3aWFHVmhaR1Z5Vkhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlJc0luUjVjR1VpT2lKdWIyNWxJaXdpY0hNaU9pSmJkbWx3TVYwZzRwR25JQ0RtbHJEbGlxRGxuYUVnTVRBd01FM3Z2WnpEbHpIbGdJM25qb2Z2dlp6cG1aRHBnSjh4TURCTklpd2ljbVZ0WVhKcklqb2lXM1pwY0RGZElPS1JweUFnNXBhdzVZcWc1WjJoSURFd01EQk43NzJjdzVjeDVZQ041NDZINzcyYzZabVE2WUNmTVRBd1RTSXNJbWxrSWpvaU1EazBNamhoT0dVdE1ETTNPUzB6TkRCakxXRXdObU10WmpWaE16TTROalV6TkRFd0lpd2lZMnhoYzNNaU9qRjkKdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUl4TVM1cllXdGhlWFZ1TG1odmJXVnpJaXdpY0c5eWRDSTZNekF3TVRFc0ltRnBaQ0k2TWl3aWJtVjBJam9pZEdOd0lpd2lhR1ZoWkdWeVZIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSXNJblI1Y0dVaU9pSnViMjVsSWl3aWNITWlPaUpiZG1sd01WMGc0cEdvSU9hV3NPV0tvT1dkb1NBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0p5WlcxaGNtc2lPaUpiZG1sd01WMGc0cEdvSU9hV3NPV0tvT1dkb1NBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0pwWkNJNklqQTVOREk0WVRobExUQXpOemt0TXpRd1l5MWhNRFpqTFdZMVlUTXpPRFkxTXpReE1DSXNJbU5zWVhOeklqb3hmUT09CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJeE5DNXJZV3RoZVhWdUxtaHZiV1Z6SWl3aWNHOXlkQ0k2TXpBd01UUXNJbUZwWkNJNk1pd2libVYwSWpvaWRHTndJaXdpYUdWaFpHVnlWSGx3WlNJNkltNXZibVVpTENKMklqb2lNaUlzSW5SNWNHVWlPaUp1YjI1bElpd2ljSE1pT2lKYmRtbHdNVjBnNHBHcklPYVdzT1dLb09XZG9TQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKeVpXMWhjbXNpT2lKYmRtbHdNVjBnNHBHcklPYVdzT1dLb09XZG9TQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKcFpDSTZJakE1TkRJNFlUaGxMVEF6TnprdE16UXdZeTFoTURaakxXWTFZVE16T0RZMU16UXhNQ0lzSW1Oc1lYTnpJam94ZlE9PQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSXhOUzVyWVd0aGVYVnVMbWh2YldWeklpd2ljRzl5ZENJNk16QXdNVFVzSW1GcFpDSTZNaXdpYm1WMElqb2lkR053SWl3aWFHVmhaR1Z5Vkhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlJc0luUjVjR1VpT2lKdWIyNWxJaXdpY0hNaU9pSmJkbWx3TVYwZzRwR3NJT2FXc09XS29PV2RvVEV3TURCTjc3MmN3NWN4NVlDTjU0Nkg3NzJjNlptUTZZQ2ZNVEF3VFNJc0luSmxiV0Z5YXlJNklsdDJhWEF4WFNEaWthd2c1cGF3NVlxZzVaMmhNVEF3TUUzdnZaekRsekhsZ0kzbmpvZnZ2WnpwbVpEcGdKOHhNREJOSWl3aWFXUWlPaUl3T1RReU9HRTRaUzB3TXpjNUxUTTBNR010WVRBMll5MW1OV0V6TXpnMk5UTTBNVEFpTENKamJHRnpjeUk2TVgwPQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSXhOaTVyWVd0aGVYVnVMbWh2YldWeklpd2ljRzl5ZENJNk16QXdNVFlzSW1GcFpDSTZNaXdpYm1WMElqb2lkR053SWl3aWFHVmhaR1Z5Vkhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlJc0luUjVjR1VpT2lKdWIyNWxJaXdpY0hNaU9pSmJkbWx3TVYwZzRwR3RJT2FXc09XS29PV2RvU0F4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnlaVzFoY21zaU9pSmJkbWx3TVYwZzRwR3RJT2FXc09XS29PV2RvU0F4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnBaQ0k2SWpBNU5ESTRZVGhsTFRBek56a3RNelF3WXkxaE1EWmpMV1kxWVRNek9EWTFNelF4TUNJc0ltTnNZWE56SWpveGZRPT0Kdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUl4Tnk1cllXdGhlWFZ1TG1odmJXVnpJaXdpY0c5eWRDSTZNekF3TVRjc0ltRnBaQ0k2TWl3aWJtVjBJam9pZEdOd0lpd2lhR1ZoWkdWeVZIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSXNJblI1Y0dVaU9pSnViMjVsSWl3aWNITWlPaUpiZG1sd01WMGc0cEd1SU9lK2p1V2J2U0F4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnlaVzFoY21zaU9pSmJkbWx3TVYwZzRwR3VJT2UranVXYnZTQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKcFpDSTZJakE1TkRJNFlUaGxMVEF6TnprdE16UXdZeTFoTURaakxXWTFZVE16T0RZMU16UXhNQ0lzSW1Oc1lYTnpJam94ZlE9PQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSXhPQzVyWVd0aGVYVnVMbWh2YldWeklpd2ljRzl5ZENJNk16QXdNVGdzSW1GcFpDSTZNaXdpYm1WMElqb2lkR053SWl3aWFHVmhaR1Z5Vkhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlJc0luUjVjR1VpT2lKdWIyNWxJaXdpY0hNaU9pSmJkbWx3TVYwZzRwR3ZJT2UranVXYnZTQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKeVpXMWhjbXNpT2lKYmRtbHdNVjBnNHBHdklPZStqdVdidlNBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0pwWkNJNklqQTVOREk0WVRobExUQXpOemt0TXpRd1l5MWhNRFpqTFdZMVlUTXpPRFkxTXpReE1DSXNJbU5zWVhOeklqb3hmUT09CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJeE9TNXJZV3RoZVhWdUxtaHZiV1Z6SWl3aWNHOXlkQ0k2TXpBd01Ua3NJbUZwWkNJNk1pd2libVYwSWpvaWRHTndJaXdpYUdWaFpHVnlWSGx3WlNJNkltNXZibVVpTENKMklqb2lNaUlzSW5SNWNHVWlPaUp1YjI1bElpd2ljSE1pT2lKYmRtbHdNVjBnNHBHd0lPZStqdVdidlNBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0p5WlcxaGNtc2lPaUpiZG1sd01WMGc0cEd3SU9lK2p1V2J2U0F4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnBaQ0k2SWpBNU5ESTRZVGhsTFRBek56a3RNelF3WXkxaE1EWmpMV1kxWVRNek9EWTFNelF4TUNJc0ltTnNZWE56SWpveGZRPT0Kdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUl5TUM1cllXdGhlWFZ1TG1odmJXVnpJaXdpY0c5eWRDSTZNekF3TWpBc0ltRnBaQ0k2TWl3aWJtVjBJam9pZEdOd0lpd2lhR1ZoWkdWeVZIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSXNJblI1Y0dVaU9pSnViMjVsSWl3aWNITWlPaUpiZG1sd01WMGc0cEd4SU9tZnFlV2J2U0F4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnlaVzFoY21zaU9pSmJkbWx3TVYwZzRwR3hJT21mcWVXYnZTQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKcFpDSTZJakE1TkRJNFlUaGxMVEF6TnprdE16UXdZeTFoTURaakxXWTFZVE16T0RZMU16UXhNQ0lzSW1Oc1lYTnpJam94ZlE9PQp2bWVzczovL2V5Sm9iM04wSWpvaUlpd2ljR0YwYUNJNklpSXNJblJzY3lJNklpSXNJblpsY21sbWVWOWpaWEowSWpwMGNuVmxMQ0poWkdRaU9pSXlNUzVyWVd0aGVYVnVMbWh2YldWeklpd2ljRzl5ZENJNk16QXdNakVzSW1GcFpDSTZNaXdpYm1WMElqb2lkR053SWl3aWFHVmhaR1Z5Vkhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlJc0luUjVjR1VpT2lKdWIyNWxJaXdpY0hNaU9pSmJkbWx3TVYwZzRwR3lJT21mcWVXYnZTQXhNREF3VGUrOW5NT1hNZVdBamVlT2grKzluT21aa09tQW56RXdNRTBpTENKeVpXMWhjbXNpT2lKYmRtbHdNVjBnNHBHeUlPbWZxZVdidlNBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0pwWkNJNklqQTVOREk0WVRobExUQXpOemt0TXpRd1l5MWhNRFpqTFdZMVlUTXpPRFkxTXpReE1DSXNJbU5zWVhOeklqb3hmUT09CnZtZXNzOi8vZXlKb2IzTjBJam9pSWl3aWNHRjBhQ0k2SWlJc0luUnNjeUk2SWlJc0luWmxjbWxtZVY5alpYSjBJanAwY25WbExDSmhaR1FpT2lJeU1pNXJZV3RoZVhWdUxtaHZiV1Z6SWl3aWNHOXlkQ0k2TXpBd01qSXNJbUZwWkNJNk1pd2libVYwSWpvaWRHTndJaXdpYUdWaFpHVnlWSGx3WlNJNkltNXZibVVpTENKMklqb2lNaUlzSW5SNWNHVWlPaUp1YjI1bElpd2ljSE1pT2lKYmRtbHdNVjBnNHBHeklPbW1tZWE0cnlBeE1EQXdUZSs5bk1PWE1lV0FqZWVPaCsrOW5PbVprT21BbnpFd01FMGlMQ0p5WlcxaGNtc2lPaUpiZG1sd01WMGc0cEd6SU9tbW1lYTRyeUF4TURBd1RlKzluTU9YTWVXQWplZU9oKys5bk9tWmtPbUFuekV3TUUwaUxDSnBaQ0k2SWpBNU5ESTRZVGhsTFRBek56a3RNelF3WXkxaE1EWmpMV1kxWVRNek9EWTFNelF4TUNJc0ltTnNZWE56SWpveGZRPT0Kdm1lc3M6Ly9leUpvYjNOMElqb2lJaXdpY0dGMGFDSTZJaUlzSW5Sc2N5STZJaUlzSW5abGNtbG1lVjlqWlhKMElqcDBjblZsTENKaFpHUWlPaUl4TWk1cllXdGhlWFZ1TG1odmJXVnpJaXdpY0c5eWRDSTZNekF3TVRJc0ltRnBaQ0k2TWl3aWJtVjBJam9pZEdOd0lpd2lhR1ZoWkdWeVZIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSXNJblI1Y0dVaU9pSnViMjVsSWl3aWNITWlPaUxscElmbmxLamxuNS9sa0kwZ1hIUjNkM2N1YTJGcllYbDFiaTVoY25RaUxDSnlaVzFoY21zaU9pTGxwSWZubEtqbG41L2xrSTBnWEhSM2QzY3VhMkZyWVhsMWJpNWhjblFpTENKcFpDSTZJakE1TkRJNFlUaGxMVEF6TnprdE16UXdZeTFoTURaakxXWTFZVE16T0RZMU16UXhNQ0lzSW1Oc1lYTnpJam93ZlE9PQo='
    base64_str2 = base64.b64decode(base64_str)
    base64_str3 = base64_str2.decode('UTF-8')
    base64_str3_list = base64_str3.split('\n')
    # print(base64_str3_list)
    for base64_str4 in base64_str3_list:
        if len(base64_str4) == 0:
            continue
        # print(base64_str4)
        base64_str5 = base64_str4[8:]
        base64_str6 = base64.urlsafe_b64decode(base64_str5 + '=' * (-len(base64_str5) % 4))
        base64_str7 = base64_str6.decode('utf-8')
        json_base64_str = json.loads(base64_str7)
        print(json_base64_str)

    # print(base64_str4)
    # base64_str5 = base64_str4.decode('UTF-8')
    # print(type(base64_str4))
    # print(base64_str5)



# 按间距中的绿色按钮以运行脚本。
if __name__ == '__main__':
    handle_proxy_base64url()
